@isTest(seeAllData=false)
public class Provider_ServiceTestClass{
    
    static List<product2> productList;
    static List<Account> accsList;
    static List<Contact> providerList;
    Static List<Id> providerIds;
    Static List<Id> productIds;
    
    Static Integer maxProvidersReg=5;
    Static Integer maxProductsReg=5;
    
    Static Integer maxProvidersBulk=5;
    Static Integer maxProductsBulk=5;
    
     private static void setBulkLimit()
    {
        	//Option 1
        	Organization org = [SELECT id, Name FROM Organization];
			Id orgId1 = org.Id;
        	
        	
        	if(orgId1.equals('00D8A0000000OqoUAE'))
        		{
           			// 
           			System.debug('Organization Id is:'+orgId1);
           			System.debug('The organization id matches');
           			maxProvidersBulk=25;
    	   			maxProductsBulk=20; 
        		}    
    }
    
    //Method to create sample data, need to have input parameters for this method 
    private static void createSampleData(Integer maxProviders, Integer maxProducts){
        
        //Initialize
        accsList = new List<Account>();
        productList = new List<product2>();
    	providerList= new List<Contact>();
    	providerIds= new List<Id>();
    	productIds= new List<Id>();
        
        //Insert Accounts
        //Get the record type 
        Schema.DescribeSObjectResult cfrSchema1 = Schema.SObjectType.Account; 
        Map<String,Schema.RecordTypeInfo> AccountRecordTypeInfo1 = new Map<String,Schema.RecordTypeInfo>();
        AccountRecordTypeInfo1 = cfrSchema1.getRecordTypeInfosByName();
        Id accountRecordTypeId=AccountRecordTypeInfo1.get('Provider Account Individual or LLC').getRecordTypeId(); 
        
        //Insert Accounts
        for (Integer i=0; i<maxProviders; i++) {
            accsList.add(new  Account(Name='TestProviderAccount'+i,RecordTypeId=accountRecordTypeId));
        }        
        insert accsList;
        
        //Create providers
        providerList= new List<Contact>();
        
        //Contact record types 
        Schema.DescribeSObjectResult cfrSchema2 = Schema.SObjectType.Contact; 
        Map<String,Schema.RecordTypeInfo> ContactRecordTypeInfo1 = new Map<String,Schema.RecordTypeInfo>();
        ContactRecordTypeInfo1 = cfrSchema2.getRecordTypeInfosByName(); 
        Id contactRecordTypeId=ContactRecordTypeInfo1.get('Provider Contact').getRecordTypeId();
        
        //Insert Providers
        for (Integer i=0; i<maxProviders; i++) {
            providerList.add(new Contact(LastName = 'sampleProvider '+i,Email='sampleprovider'+i+'@gmail.com', AccountId = accsList.get(i).id, RecordTypeId=contactRecordTypeId,BT_Approval_State_on_Site__c='Active',MDL_Affiliation_Date__c=system.today(),MDL_Temp_Inactive__c=null));
        }
        insert providerList;
        
        providerIds = new List<Id>();
        for(Contact p: providerList)
        {
            providerIds.add(p.id);
        }
        
       //Insert Products 
       for (Integer i=0; i<maxProducts; i++) {
            productList.add(new product2(Name = 'MDLIVETestProduct1'+i,IsActive=true,MDLIVE__c=true));
        }
        insert productList;
        
        for(product2 p: productList)
        {
            productIds.add(p.id);
        }
        
    }//End of sample data creation
    
    //The method to perform regular tests with providers
    //createInsuranceAffiliationRecords
    @isTest static void TestCreateInsuranceAffiliationRecordsRegular(){
        //Test method when count request is true        
        //create data
        //Integer maxProviders=5; //Set to 200 to validate real bulk tests
        //Integer maxProducts=5;
        String result;
        List<Insurance_Affiliation__c> lstAffiliation;
        createSampleData(maxProvidersReg,maxProductsReg);
        //call functions
        //Perform test
        Test.startTest();
        //This method inserts insurance affiliation records by looping providers
        result = Provider_Service.createInsuranceAffiliationRecords(providerIds,false);
        Test.stopTest();
        
        //assert results
		lstAffiliation=[select id from Insurance_Affiliation__c where Provider_Name__r.id IN :providerIds];
		System.assertEquals(maxProvidersReg*maxProductsReg,lstAffiliation.size());
        System.assertEquals('Records added: '+lstAffiliation.size(),result);
    }  
     //The method to perform regular tests with providers
    //createInsuranceAffiliationRecords
    @isTest static void TestCreateInsuranceAffiliationRecordsCountRequestRegular(){
        //Test method when count request is false        
        //create data
        //Integer maxProviders=5; //Set to 200 to validate real bulk tests
        //Integer maxProducts=5;
        String result;
        List<Insurance_Affiliation__c> lstAffiliation;
        createSampleData(maxProvidersReg,maxProductsReg);
        //call functions
        //Perform test
        Test.startTest();
        //This method inserts insurance affiliation records by looping providers
        result = Provider_Service.createInsuranceAffiliationRecords(providerIds,true);
        Test.stopTest();
        
        
        //assert results
        System.assertEquals('Records to be added: '+maxProvidersReg*maxProductsReg,result);
    }
    //The method to perform bulk tests with providers 
   	@isTest static void TestInsertInsuranceAffiliationWithCountRequestProvidersBulk() {
    
        //Limits: providers * products < 5000 else dml exception, only for test class as in real case the class is called by button & each call to button is separate apex transaction
        //Bulk test, more than 500 IA records are inserted 
        //Test method when count request is true         
        //create data
        //
        
        setBulkLimit();
  
        Integer IAcount;
        List<Insurance_Affiliation__c> lstAffiliation;
        Integer callMethod = (maxProvidersBulk*maxProductsBulk)/500;
        String result;
        
        createSampleData(maxProvidersBulk,maxProvidersBulk);
        //call functions
        //Perform test
        Test.startTest();
        //This method inserts insurance affiliation records by looping providers 
        result = Provider_Service.createInsuranceAffiliationRecords(providerIds,true);
        Test.stopTest();
        
        //assert results
        System.assertEquals('Records to be added: '+maxProvidersBulk*maxProvidersBulk,result);
    }
      
          //The method to perform bulk tests with providers 
   	@isTest static void TestCreateInsuranceAffiliationRecordsBulk() {
    
        //Limits: providers * products < 5000 else dml exception, only for test class as in real case the class is called by button & each call to button is separate apex transaction
        //Bulk test, more than 500 IA records are inserted 
        //Test method when count request is false         
        //create data
       	setBulkLimit();
        Integer IAcount;
        List<Insurance_Affiliation__c> lstAffiliation;
        Integer callMethod = (maxProvidersBulk*maxProductsBulk)/500;
        String result;
        
        createSampleData(maxProvidersBulk,maxProductsBulk);
        //call functions
        //Perform test
        Test.startTest();
        //This method inserts insurance affiliation records by looping products
        while(callMethod>=0)
        {
 	       Provider_Service.createInsuranceAffiliationRecords(providerIds,false);
           callMethod--;
        }
        Test.stopTest();
        
        //assert results
        //Check that all insurance affiliation records has been added 
        lstAffiliation=[select id from Insurance_Affiliation__c where Provider_Name__r.id IN :providerIds];
		System.assertEquals(maxProvidersBulk*maxProductsBulk,lstAffiliation.size());
    } 
}